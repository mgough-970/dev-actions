name: Full Notebook CI Pipeline

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      execution-mode:
        required: true
        type: string
      single-filename:
        required: false
        type: string
      build-html:
        required: false
        type: boolean
        default: true
      security-scan:
        required: false
        type: boolean
        default: true

    secrets:
      CASJOBS_USERID:
        required: false
      CASJOBS_PW:
        required: false

jobs:
  validate-and-execute:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        notebook: []
    defaults:
      run:
        shell: bash -leo pipefail {0}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up uv
      uses: astral-sh/setup-uv@v6.0.1
      with:
        version: "0.7.3"
        python-version: ${{ inputs.python-version }}
        enable-cache: true

    - name: Set up micromamba
      if: ${{ github.repository == 'spacetelescope/hst_notebooks' }}
      uses: mamba-org/setup-micromamba@v2.0.4
      with:
        init-shell: bash
        create-args: >-
          python=${{ inputs.python-version }}
          hstcal

    - name: Install Validation Dependencies
      run: |
        uv pip install jupyter nbval nbconvert bandit

    - name: Validate Notebook
      run: |
        if [[ "${{ inputs.single-filename }}" != "" ]]; then
          uv run pytest --nbval --nbval-cell-timeout=4000 "${{ inputs.single-filename }}"
        else
          find notebooks/ -name '*.ipynb' | while read nb; do
            uv run pytest --nbval --nbval-cell-timeout=4000 "$nb"
          done
        fi

    - name: Execute Notebook
      run: |
        if [[ "${{ inputs.single-filename }}" != "" ]]; then
          uv run jupyter nbconvert --to notebook --execute --inplace "${{ inputs.single-filename }}"
        else
          find notebooks/ -name '*.ipynb' | while read nb; do
            uv run jupyter nbconvert --to notebook --execute --inplace "$nb"
          done
        fi

    - name: Security Scan
      if: inputs.security-scan == true
      run: |
        find notebooks/ -name '*.ipynb' | while read nb; do
          uv run jupyter nbconvert --to script "$nb"
        done
        uv runbandit -r notebooks/

    - name: Upload Notebook Artifacts if Failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: failed-notebooks
        path: notebooks/

