name: Full Notebook CI Pipeline

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      execution-mode:
        required: true
        type: string
      single-filename:
        required: false
        type: string
      build-html:
        required: false
        type: boolean
        default: true
      security-scan:
        required: false
        type: boolean
        default: true
      use-conda:
        required: false
        type: boolean
        default: false
      conda-environment-file:
        required: false
        type: string
      conda-packages:
        required: false
        type: string
    secrets:
      CASJOBS_USERID:
        required: false
      CASJOBS_PW:
        required: false

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      notebooks_json: ${{ steps.set.outputs.notebooks_json }}
      dependencies_changed: ${{ steps.set.outputs.dependencies_changed }}
      static_changed: ${{ steps.set.outputs.static_changed }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - id: set
      run: |
        git fetch origin main

        echo "Detecting changes..."

        NOTEBOOKS_TO_RUN=()

        echo "Checking if global dependency files changed..."
        if git diff --name-only origin/main HEAD -- requirements.txt environment.yml pre-requirements.sh | grep .; then
          echo "Global dependency file change detected."
          NOTEBOOKS_TO_RUN+=($(find notebooks/ -name '*.ipynb'))
        fi

        echo "Checking if subfolder requirements.txt files changed..."
        for file in $(git diff --name-only origin/main HEAD -- 'notebooks/**/requirements.txt'); do
          if [[ -n "$file" ]]; then
            folder=$(dirname "$file")
            echo "Folder-specific dependency file changed in $folder"
            NOTEBOOKS_TO_RUN+=($(find "$folder" -name '*.ipynb'))
          fi
        done

        if [[ "${{ github.event_name }}" == "pull_request" && "${{ inputs.execution-mode || 'changed' }}" == "changed" ]]; then
          echo "Adding changed notebooks from PR diff."
          CHANGED_NOTEBOOKS=$(git diff --name-only origin/main HEAD -- 'notebooks/**/*.ipynb')
          for nb in $CHANGED_NOTEBOOKS; do
            NOTEBOOKS_TO_RUN+=("$nb")
          done
        fi

        # De-duplicate
        NOTEBOOKS_TO_RUN=($(printf "%s\n" "${NOTEBOOKS_TO_RUN[@]}" | sort -u))

        if [[ ${#NOTEBOOKS_TO_RUN[@]} -eq 0 ]]; then
          echo "No notebooks detected for execution."
          echo "notebooks_json=[]" >> $GITHUB_OUTPUT
        else
          # Convert list to JSON array
          NOTEBOOKS_JSON=$(printf '%s\n' "${NOTEBOOKS_TO_RUN[@]}" | jq -R . | jq -s .)
          echo "Detected notebooks:"
          echo "$NOTEBOOKS_JSON"
          echo "notebooks_json<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTEBOOKS_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

        # Dependency or static file changes (only useful info gathering)
        DEPS=$(git diff --name-only origin/main HEAD -- requirements.txt environment.yml pre-requirements.sh | tr '\n' ' ')
        echo "dependencies_changed=$([[ -n \"$DEPS\" ]] && echo true || echo false)" >> $GITHUB_OUTPUT

        STATIC=$(git diff --name-only origin/main HEAD -- '*.md' static/** assets/** | tr '\n' ' ')
        echo "static_changed=$([[ -n \"$STATIC\" ]] && echo true || echo false)" >> $GITHUB_OUTPUT


  validate-and-execute:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: ${{ needs.detect-changes.outputs.notebooks_json != '[]' }}
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.detect-changes.outputs.notebooks_json) }}
      fail-fast: false
      max-parallel: 4
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install Validation Dependencies
      run: |
        pip install jupyter nbval nbconvert bandit

    - name: Install Local Requirements
      run: |
        ipynb_file="${{ matrix.notebook }}"
        nb_dir=$(dirname "$ipynb_file")

        if [ -f "$nb_dir/requirements.txt" ]; then
          echo "Installing local requirements for $ipynb_file"
          pip install -r "$nb_dir/requirements.txt"
        else
          echo "No local requirements.txt for $ipynb_file"
        fi

    - name: Validate Notebook
      run: |
        pytest --nbval --nbval-cell-timeout=4000 "${{ matrix.notebook }}"

    - name: Execute Notebook
      run: |
        jupyter nbconvert --to notebook --execute --inplace "${{ matrix.notebook }}"

    - name: Security Scan Notebook
      if: inputs.security-scan == true
      run: |
        ipynb_file="${{ matrix.notebook }}"
        py_file="${ipynb_file%.ipynb}.py"
        echo "Converting $ipynb_file to script for Bandit scan"
        jupyter nbconvert --to script "$ipynb_file"
        bandit "$py_file"

    - name: Upload Notebook if Failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: failed-${{ matrix.notebook }}
        path: ${{ matrix.notebook }}



  post-merge-storage-update:
    needs: [detect-changes, validate-and-execute]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        ref: gh-storage
        fetch-depth: 0

    - name: Checkout Main to temp dir
      run: |
        mkdir main-checkout
        cd main-checkout
        git init
        git remote add origin https://github.com/${{ github.repository }}
        git fetch origin main
        git checkout FETCH_HEAD

    - name: Find changed notebooks from main
      id: find-changes
      run: |
        cd main-checkout
        NOTEBOOKS=$(git diff --name-only origin/gh-storage FETCH_HEAD -- 'notebooks/**/*.ipynb' | tr '\n' ' ')
        echo "changed=$NOTEBOOKS" >> $GITHUB_OUTPUT

    - name: Re-execute and update gh-storage
      if: steps.find-changes.outputs.changed != ''
      run: |
        cd main-checkout
        for file in ${{ steps.find-changes.outputs.changed }}; do
          echo "Executing $file"
          jupyter nbconvert --to notebook --execute --inplace "$file"
          cp "$file" ../
        done

    - name: Commit updated notebooks
      if: steps.find-changes.outputs.changed != ''
      run: |
        git config --global user.name "CI Bot"
        git config --global user.email "ci-bot@example.com"
        git add ${{ steps.find-changes.outputs.changed }}
        git commit -m "Post-merge executed notebook updates"
        git push origin gh-storage
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-html-site:
    needs: [post-merge-storage-update]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    uses: mgough-970/dev-actions/.github/workflows/ci_html_builder.yml@v1
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}
